AsyncFunction
NextFunction
type AsyncFunction = (
  req: Request,
  res: Response,
  next: NextFunction,
) => Promise<any>;

for (const [key, value] of Object.entries(headers))
RequestHandler return normally promise<void>, so you
cannot do the .catch on it unless it is promise<any>

function getPromise() {
  return new Promise((resolve, reject) => {
    // ⛔️ Error: Expected 1 arguments, but got 0.
    // Did you forget to include 'void' in your
    // type argument to 'Promise'?ts(2794)
    resolve();
  });
}


inside the promise we can either do the resolve(43) or return 43, which both do the same.

resolve() means no return like return nothing 
what dows mean that at the end it is void, so we should say that the promise is void type


.then()// takes the argument and do just void like console.log(value)